pipeline {
    agent any 
    environment {
        DOCKERFILE_NAME = "Dockerfile"
        DOCKER_DIR="./01_docker"
        IMAGE_NAME="ic-webapp"
        IMAGE_TAG="1.0"
        PORT_APP= "8080"
        PORT_HOST= "8081"
        DOCKERHUB_USERNAME= "mohakadd"
        DOCKERHUB_PASSWORD= credentials('dockerhub_password')
    }
    stages {
        // stage('Build Image'){
        //     steps{
        //         script{
        //             sh '''
        //                 docker build --no-cache -f ${DOCKER_DIR}/${DOCKERFILE_NAME} -t ${IMAGE_NAME}:${IMAGE_TAG} ${DOCKER_DIR}/.
        //             '''
        //         }
        //     }
        // }
        // stage('Run & Test Image'){
        //     steps{
        //         script{
        //             sh '''
        //                 docker ps -a | grep -i ${IMAGE_NAME} && docker rm -f ${IMAGE_NAME}
        //                 docker run --name ${IMAGE_NAME} -dp ${PORT_HOST}:${PORT_APP} ${IMAGE_NAME}:${IMAGE_TAG}
        //                 sleep 5
        //                 curl -I http://172.17.0.1:${PORT_HOST} | grep -i "200"
        //             '''
        //         }
        //     }
        // }
        // stage('Stop & Delete Container'){
        //     steps{
        //         script{
        //             sh '''
        //                 docker stop  ${IMAGE_NAME}
        //                 docker ps -a | grep -i ${IMAGE_NAME} && docker rm -f ${IMAGE_NAME}
        //                 docker tag ${IMAGE_NAME}:${IMAGE_TAG} ${DOCKERHUB_USERNAME}/${IMAGE_NAME}:${IMAGE_TAG}
        //             '''
        //         }
        //     }
        // }
        // stage('Login & Push Image'){
        //     steps{
        //         script{
        //             sh '''
        //                 echo ${DOCKERHUB_PASSWORD} | docker login -u ${DOCKERHUB_USERNAME} --password-stdin
        //                 docker push ${DOCKERHUB_USERNAME}/${IMAGE_NAME}:${IMAGE_TAG}
        //             '''
        //         }
        //     }
        // }
        stage('Infra Docker EC2'){
            environment {
                AWS_ACCESS_KEY_ID = credentials('access_key')
                AWS_SECRET_ACCESS_KEY = credentials('secret_key')
            }
            agent {
                docker {
                    image 'jenkins/jnlp-agent-terraform'
                }
            }
            steps{
                script{
                    sh'''
                        mkdir -p ~/.aws
                        echo "[default]" > ~/.aws/credentials
                        echo -e "aws_access_key_id=$AWS_ACCESS_KEY_ID" >> ~/.aws/credentials
                        echo -e "aws_secret_access_key=$AWS_SECRET_ACCESS_KEY" >> ~/.aws/credentials
                        chmod 400 ~/.aws/credentials
                        cd 02_terraform/
                        terraform init
                        terraform apply -auto-approve -var="script_name=docker.sh"
                    '''
                }
            }
        }
        stage('Ansible deploy on Docker EC2'){
            agent {
                docker {
                    image 'registry.gitlab.com/robconnolly/docker-ansible:latest'
                }
            }
            steps{
                script{
                    sh '''
                        cd 03_ansible/
                        cat host_vars/machine-1.yaml
                        ansible machine-1 -m ping --private-key ../02_terraform/keypair/projet03.pem
                        sleep 5
                        ansible-playbook playbooks/docker.yaml --private-key ../02_terraform/keypair/projet03.pem --tags start
                    '''
                }
            }
        }
        stage('Delete Instance'){
            steps{
                input message: "Voulez vous supprimer L'instance Docker EC2 ?", ok: 'Yes'
            }
        }
        stage('Delete Infra Docker EC2'){
            environment {
                AWS_ACCESS_KEY_ID = credentials('access_key')
                AWS_SECRET_ACCESS_KEY = credentials('secret_key')
            }
            agent {
                docker {
                    image 'jenkins/jnlp-agent-terraform'
                }
            }
            steps{
                script{
                    sh'''
                        mkdir -p ~/.aws
                        echo "[default]" > ~/.aws/credentials
                        echo -e "aws_access_key_id=$AWS_ACCESS_KEY_ID" >> ~/.aws/credentials
                        echo -e "aws_secret_access_key=$AWS_SECRET_ACCESS_KEY" >> ~/.aws/credentials
                        chmod 400 ~/.aws/credentials
                        cd 02_terraform/
                        terraform init
                        terraform destroy -auto-approve -var="script_name=docker.sh"
                    '''
                }
            }
        }
        stage('Infra Kubernetes EC2'){
            environment {
                AWS_ACCESS_KEY_ID = credentials('access_key')
                AWS_SECRET_ACCESS_KEY = credentials('secret_key')
            }
            agent {
                docker {
                    image 'jenkins/jnlp-agent-terraform'
                }
            }
            steps{
                script{
                    sh'''
                        mkdir -p ~/.aws
                        echo "[default]" > ~/.aws/credentials
                        echo -e "aws_access_key_id=$AWS_ACCESS_KEY_ID" >> ~/.aws/credentials
                        echo -e "aws_secret_access_key=$AWS_SECRET_ACCESS_KEY" >> ~/.aws/credentials
                        chmod 400 ~/.aws/credentials
                        cd 02_terraform/
                        terraform init
                        terraform apply -auto-approve -var="script_name=k3s.sh"
                    '''
                }
            }
        }
        stage('Ansible deploy on Kubernetes EC2'){
            agent {
                docker {
                    image 'registry.gitlab.com/robconnolly/docker-ansible:latest'
                }
            }
            steps{
                script{
                    sh '''
                        cd 03_ansible/
                        cat host_vars/machine-1.yaml
                        ansible machine-1 -m ping --private-key ../02_terraform/keypair/projet03.pem
                        sleep 5
                        ansible-playbook playbooks/k3s.yaml --private-key ../02_terraform/keypair/projet03.pem --tags create
                    '''
                }
            }
        }
        stage('Delete Instance'){
            steps{
                input message: "Voulez vous supprimer L'instance Kubernetes EC2 ?", ok: 'Yes'
            }
        }
        stage(' Delete Infra Kubernetes EC2'){
            environment {
                AWS_ACCESS_KEY_ID = credentials('access_key')
                AWS_SECRET_ACCESS_KEY = credentials('secret_key')
            }
            agent {
                docker {
                    image 'jenkins/jnlp-agent-terraform'
                }
            }
            steps{
                script{
                    sh'''
                        mkdir -p ~/.aws
                        echo "[default]" > ~/.aws/credentials
                        echo -e "aws_access_key_id=$AWS_ACCESS_KEY_ID" >> ~/.aws/credentials
                        echo -e "aws_secret_access_key=$AWS_SECRET_ACCESS_KEY" >> ~/.aws/credentials
                        chmod 400 ~/.aws/credentials
                        cd 02_terraform/
                        terraform init
                        terraform destroy -auto-approve -var="script_name=k3s.sh"
                    '''
                }
            }
        }   
    }
}